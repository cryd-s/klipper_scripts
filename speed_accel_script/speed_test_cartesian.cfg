[gcode_macro _USER_VARIABLES]
variable_printer: cartesian
#variable_printer: corexy

[gcode_macro _step_error]
gcode:  
    {action_raise_error("SKIPPED STEPS DETECTED!")}

[gcode_macro _store_mcu_position]
# This macro stores the current position of a specified stepper motor in a variable called mcu_position. 
# This position can be accessed later, for example, to compare the stepper's current position 
# to its position at a previous point in time.
variable_mcu_position_x: 0
variable_mcu_position_y: 0                                                                                            # Define a variable named mcu_position and initialize it to 0
gcode:
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={printer["stepper_x"]["mcu_position"]}
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={printer["stepper_y"]["mcu_position"]}  # Set the value of mcu_position to the current position of the stepper motor specified in the parameters

[gcode_macro _compare_mcu_position]
# This macro compares the old position (stored in _store_mcu_position macro) of the specified stepper motor with its current position. 
# If the difference between the two positions is greater than the number of microsteps set in the printer 
# settings for that stepper, a warning message is output and the velocity limit is reset to maximum values. 
# Additionally, the _step_error macro is invoked.
# If no step differences are detected, a corresponding message is output.
gcode:
    {% set printer = params.printer|default(printer["gcode_macro _USER_VARIABLES"].variable_printer)|lower %} 
    {% set config = printer.configfile.settings %}
    {% set old_position_x = printer["gcode_macro _store_mcu_position"].mcu_position_x|int %}
    {% set old_position_y = printer["gcode_macro _store_mcu_position"].mcu_position_y|int %}
    {% set new_position_x = printer["stepper_x"]["mcu_position"] %}
    {% set new_position_y = printer["stepper_y"]["mcu_position"] %}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={new_position_x}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={new_position_y}
    {% if (old_position_x - new_position_x)|abs > printer.configfile.settings["stepper_x"]["microsteps"] or (old_position_y - new_position_y)|abs > printer.configfile.settings["stepper_y"]["microsteps"] %} 
        {% if printer == "cartesian" %}
            M118 Step difference - X: {old_position_x - new_position_x}, Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - A: {old_position_x - new_position_x}, B: {old_position_y - new_position_y}
        {% endif %}
        SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
        _step_error
    {% else %}
        {% if printer == "cartesian" %}
            M118 Step difference - Stepper X: {old_position_x - new_position_x}, Stepper Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - Stepper A: {old_position_x - new_position_x}, Stepper B: {old_position_y - new_position_y}
        {% endif %}
        M118 No skipped steps detected.
    {% endif %}

[gcode_macro MAX_ACCEL_TEST]
description: Test the maximum acceleration along the X or Y axis
# Created by Fragmon
# Version 1.0
################
# INTRODUCTION
################
# The MAX_ACCEL_TEST G-code macro is designed to test the maximum acceleration of a 3D printer along the X and Y axes.
# It performs a series of test movements at various acceleration values, allowing you to examine your printer's performance at different acceleration rates.
# The macro uses several parameters to customize the test:
# - MIN_ACCEL: The minimum acceleration at which the test should start (default: 100 mm/s^2).
# - MAX_ACCEL: The maximum acceleration at which the test should be performed (default: 1000 mm/s^2).
# - ACCEL_INCREMENT: The increment in acceleration for each step of the test (default: 100 mm/s^2).
# - AXIS: The axis along which the test should be performed (default: "X").
# - SPEED: The speed to use during the test (default: the printer's maximum velocity setting).
# - REPEAT: Number of round trip moves to perform at each velocity step (50).
# The macro will loop through the specified range of accelerations, perform test movements, and display the current speed and acceleration values.
# After the test, it will reset the printer's initial acceleration settings and home all axes.
###################
# HOW TO USE IT
###################
# Before and after running the macro, the macro set GET_POSITION to create MCU stepper values.
# Ensure that the difference between these numbers has not exceeded a full step.
# If the number has deviated more than this, it means that the corresponding axis has likely skipped.
gcode:
    # Set default values for the parameters
    {% set printer = params.printer|default(printer["gcode_macro _USER_VARIABLES"].variable_printer)|lower %} 
    {% set config = printer.configfile.settings %}
    {% set min_accel = params.MIN_ACCEL|default(10)|int %}
    {% set max_accel = params.MAX_ACCEL|default(300)|int %}
    {% set limit_accel = 75000 %}
    {% set accel_increment = params.ACCEL_INCREMENT|default(100)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set velocity = params.SPEED|default(config.printer["max_velocity"])|float %}
    {% set repeat = params.REPEAT|default(50)|int %}

    # Check if the min_accel and max_accel values are within the allowed limit
    {% if min_accel > max_accel %}
        { action_raise_error("Minimum velocity is greater than maximum velocity.") } 
    {% elif max_accel > limit_accel %}
        { action_raise_error("Maximum velocity is greater than limit.") } 
    {% endif %}
   
    # Calculate the max, min and midpoint of the X and Y axes
    {% set stepper = "stepper_" + axis|lower %}
    {% set stepper_config = config[stepper] %}
    {% set axis_min = stepper_config["position_min"]|float %}
    {% set axis_max = stepper_config["position_max"]|float %}
    {% set max_axis_margin = 0.1 * (axis_max - axis_min) %}
    {% set axis_margin = 20 if 20 < max_axis_margin else max_axis_margin %}

    {% set axis_min = axis_min + axis_margin %}
    {% set axis_max = axis_max - axis_margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (velocity ** 2) / min_accel > axis_range %}
        { action_raise_error("Not enough distance on the axis for cruising. Either increase MIN_ACCEL or decrease VELOCITY.") }
    {% endif %}

    # Home the axis, store the step position, and set the limits for the test
    G28
    G1 X{axis_mid} Y{axis_mid} Z20
    _store_mcu_position STEPPER={stepper}
    SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL_TO_DECEL={max_accel}

    # Loop through the specified range of accelerations
    {% for accel in range(min_accel, max_accel + 1, accel_increment) %}
        # Set the acceleration
        SET_VELOCITY_LIMIT ACCEL={accel}

        # Display the current speed and acceleration values
        M118 Velocity / Acceleration: {velocity} mm/s / {accel} mm/s2
        
        # Perform 50 test movements for the specified axis
        {% for i in range(repeat) %}
            # Calculate a random distance for the test movement
            {% set min_distance = (velocity ** 2) / accel %}
            {% set max_distance = 4 * min_distance %}
            {% set max_distance = max_distance if max_distance < axis_range else axis_range %}
            {% set movement_distance = (range(min_distance|int * 100, max_distance|int * 100)|random) / 100 %}

            # Execute test movements
            G1 {axis}{ axis_mid - movement_distance / 2 } F{ velocity * 60 }
            G1 {axis}{ axis_mid + movement_distance / 2 }
            G1 {axis}{ axis_mid }
        {% endfor %}

        # home the axis, verify the step position
        G28 {axis}
        _compare_mcu_position STEPPER={stepper}
    {% endfor %}
        
    # Reset the initial limits
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}      

[gcode_macro MAX_VELOCITY_TEST]
description: Test the maximum velocity along the X or Y axis
# Created by Fragmon
# Version 1.0
#############
# INTRODUCTION
#############
# The following G-code macro, MAX_VELOCITY_TEST, is designed to test the maximum velocity of a 3D printer along the X and Y axes.
# It performs a series of test movements at various velocities, allowing you to examine your printer's performance at different speeds.
# The macro uses several parameters to customize the test:
# - MIN_VELOCITY: The minimum velocity at which the test should start (default: 10 mm/s).
# - MAX_VELOCITY: The maximum velocity at which the test should be performed (default: 300 mm/s).
# - VELOCITY_INCREMENT: The increment in velocity for each step of the test (default: 10 mm/s).
# - AXIS: The axis along which the test should be performed (default: "X").
# - ACCEL: The acceleration value to use during the test (default: the printer's maximum acceleration setting).
# - DISTANCE: Specifies the distance for the test movements, either "full" (default) or "short". If set to "full", the macro will use the maximum available distance on the axis; if set to "short", it will use a random distance for each test movement that ensures the specified velocity is reached.
# - REPEAT: Number of round trip moves to perform at each velocity step (default to 5 for "DISTANCE=full", 50 for "short").
# The macro will loop through the specified range of velocities, perform test movements, and display the current speed and acceleration values.
# After the test, it will reset the printer's initial velocity settings and home all axes.
##############
# HOW TO USE IT
##############
# Before and after running the macro, the macro set GET_POSITION to create MCU stepper values.
# Compare the numbers for the X and Y steppers.
# Ensure that the difference between these numbers has not exceeded a full step.
# If the number has deviated more than this, it means that the corresponding axis has likely skipped.
gcode: 
    # Set default values for the parameters
    {% set config = printer.configfile.settings %}
    {% set min_velocity = params.MIN_VELOCITY|default(10)|int %}
    {% set max_velocity = params.MAX_VELOCITY|default(300)|int %}
    {% set limit_velocity = 1000 %}
    {% set velocity_increment = params.VELOCITY_INCREMENT|default(10)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set accel = params.ACCEL|default(config.printer["max_accel"])|float %}
    {% set distance = params.DISTANCE|default("full")|lower %}
    {% set repeat = params.REPEAT|default(50 if distance == "short" else 5)|int %}

    # Check if the min_velocity and max_velocity values are within the allowed limit
    {% if min_velocity > max_velocity %}
        { action_raise_error("Minimum velocity is greater than maximum velocity.") } 
    {% elif max_velocity > limit_velocity %}
        { action_raise_error("Maximum velocity is greater than limit.") } 
    {% elif distance not in ["full", "short"] %}
        { action_raise_error("Set the distance to full or short") } 
    {% endif %}

    # Calculate the max, min and midpoint of the X and Y axes
    {% set stepper = "stepper_" + axis|lower %}
    {% set stepper_config = config[stepper] %}
    {% set axis_min = stepper_config["position_min"]|float %}
    {% set axis_max = stepper_config["position_max"]|float %}
    {% set max_axis_margin = 0.1 * (axis_max - axis_min) %}
    {% set axis_margin = 20 if 20 < max_axis_margin else max_axis_margin %}

    {% set axis_min = axis_min + axis_margin %}
    {% set axis_max = axis_max - axis_margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (max_velocity ** 2) / accel > axis_range %}
        { action_raise_error("Not enough distance on the axis for cruising. Either increase ACCEL or decrease MAX_VELOCITY.") }
    {% endif %}

    # Home the axis, store the step position, and set the limits for the test
    G28
    G28 {axis}
    _store_mcu_position STEPPER={stepper}
    G1 X{axis_mid} Y{axis_mid}
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={accel} ACCEL_TO_DECEL={accel}
    
    # Loop through the specified range of velocities
    {% for velocity in range(min_velocity, max_velocity + 1, velocity_increment) %}
        # Display the current speed and acceleration values
        M118 Velocity / Acceleration: {velocity} mm/s / {accel} mm/s2
        # Perform test movements for the specified axis and distance
        {% for i in range(repeat) %}
            # Calculate a distance for the test movement
            {% if distance == "full" %}
                {% set movement_distance = axis_range %}
            {% else %}
                {% set min_distance = (velocity ** 2) / accel %}
                {% set max_distance = 4 * min_distance %}
                {% set max_distance = max_distance if max_distance < axis_range else axis_range %}
                {% set movement_distance = (range(min_distance|int * 100, max_distance|int * 100)|random) / 100 %}
            {% endif %}

            # Execute test movements
            G1 {axis}{ axis_mid - movement_distance / 2 } F{ velocity * 60 }
            G1 {axis}{ axis_mid + movement_distance / 2 }
            G1 {axis}{ axis_mid }
        {% endfor %}
        # home the axis, verify the step position
        G28 {axis}
        _compare_mcu_position STEPPER={stepper}
    {% endfor %}    

    # Reset the initial limits
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}    
    
[gcode_macro BENCHMARK]
gcode:
    {% set config = printer.configfile.settings %}
    {% set accel = params.MAX_ACCEL|default(config.printer["max_accel"])|int %}
    {% set velocity = params.MAX_VELOCITY|default(config.printer["max_velocity"])|int %}
    {% set movements_short = params.MOVEMENTS_SHORT|default(200)|int %}
    {% set movements_long = params.MOVEMENTS_LONG|default(200)|int %}
    {% set seed = params.RANDOM_SEED|default(42)|int %}

    {% set stepper_x = config["stepper_x"] %}
    {% set stepper_y = config["stepper_y"] %}

    {% set x_min = stepper_x["position_min"] %}
    {% set x_max = stepper_x["position_max"] %}
    {% set y_min = stepper_y["position_min"] %}
    {% set y_max = stepper_y["position_max"] %}
    {% set axis_range_x = x_max - x_min %}
    {% set axis_range_y = y_max - y_min %}
    {% set axis_mid_x = (axis_range_x) / 2.0 %}
    {% set axis_mid_y = (axis_range_y) / 2.0 %}

    # Home the axes and set the Z-axis to 20
    G28                                                                              # This G-code command homes all the axes of the printer. 
    G28 X Y                                                                          # This G-code command homes the specific axis defined by the variable {axis}.
    _store_mcu_position
    G1 Y{axis_mid_y} X{axis_mid_x} Z20

    # Set the fixed acceleration and velocity values
    SET_VELOCITY_LIMIT ACCEL={accel} VELOCITY={velocity}

    # Perform the specified number of short movements
    {% for i in range(movements_short) %}
        {% set a = 1103515245 %}
        {% set c = 12345 %}
        {% set m = 2 ** 31 %}
        {% set seed_x = ((seed + i * 2) * a + c) % m %}
        {% set seed_y = ((seed + i * 2 + 1) * a + c) % m %}

        {% set min_distance = (velocity ** 2) / accel %}
        {% set max_distance = 3 * min_distance %}
        {% set max_distance_x = max_distance if max_distance < axis_range_x else axis_range_x %}
        {% set max_distance_y = max_distance if max_distance < axis_range_y else axis_range_y %}

        {% set movement_distance_x = (((seed_x % (max_distance_x * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}
        {% set movement_distance_y = (((seed_y % (max_distance_y * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}

        # Execute movements to the random X and Y positions
        G1 X{axis_mid_x - movement_distance_x / 2} Y{axis_mid_y - movement_distance_y / 2} F{ velocity * 60 }
    {% endfor %}

  # Perform the specified number of long movements
    {% for i in range(movements_long) %}
        {% set a = 1103515245 %}
        {% set c = 12345 %}
        {% set m = 2 ** 31 %}
        {% set seed_x = ((seed + i * 2 + movements_short * 2) * a + c) % m %}
        {% set seed_y = ((seed + i * 2 + 1 + movements_short * 2) * a + c) % m %}

        {% set min_distance = (velocity ** 2) / accel %}
        {% set max_distance_x_long = axis_range_x %}
        {% set max_distance_y_long = axis_range_y %}
        {% set movement_distance_x_long = (((seed_x % (max_distance_x_long * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}
        {% set movement_distance_y_long = (((seed_y % (max_distance_y_long * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}

        # Execute movements to the random X and Y positions
        G1 X{movement_distance_x_long / 2} Y{movement_distance_y_long / 2} F{ velocity * 60 }
    {% endfor %}

    # Home the axes and reset to initial limits
    G28 X Y                                                                          # home the axis, verify the step position
    _compare_mcu_position      
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
