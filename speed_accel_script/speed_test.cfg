# tested with klipper version v0.11.0-276 or higher.
# updated 30.09.2025 - simplified and optimized
# original edited from ellis tuning guide https://ellis3dp.com/Print-Tuning-Guide/articles/determining_max_speeds_accels.html

[gcode_macro _USER_VARIABLES]
variable_structure: "cartesian"  # "cartesian" or "corexy"
gcode:

[gcode_macro _step_error]
gcode:  
    {action_raise_error("SKIPPED STEPS DETECTED!")}

[gcode_macro _store_mcu_position]
variable_mcu_position_x: 0
variable_mcu_position_y: 0 
gcode:
  {% if "endstop_phase" not in printer %}
    {action_raise_error("endstop_phase module not found! Add [endstop_phase] to config.")}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={printer.endstop_phase.last_home.stepper_x.mcu_position}
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={printer.endstop_phase.last_home.stepper_y.mcu_position}  

[gcode_macro _compare_mcu_position]
gcode:
    {% set structure = params.STRUCTURE|default(printer["gcode_macro _USER_VARIABLES"].structure)|string|lower %}
    {% set old_x = printer["gcode_macro _store_mcu_position"].mcu_position_x|int %}
    {% set old_y = printer["gcode_macro _store_mcu_position"].mcu_position_y|int %}
    {% set new_x = printer.endstop_phase.last_home.stepper_x.mcu_position %}
    {% set new_y = printer.endstop_phase.last_home.stepper_y.mcu_position %}
    {% set diff_x = (old_x - new_x)|abs %}
    {% set diff_y = (old_y - new_y)|abs %}
    {% set threshold_x = printer.configfile.settings["stepper_x"]["microsteps"] %}
    {% set threshold_y = printer.configfile.settings["stepper_y"]["microsteps"] %}
    
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={new_x}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={new_y}
    
    {% if diff_x > threshold_x or diff_y > threshold_y %} 
        {% set label_x = "X" if structure == "cartesian" else "B" %}
        {% set label_y = "Y" if structure == "cartesian" else "A" %}
        M118 Step difference - {label_x}: {old_x - new_x}, {label_y}: {old_y - new_y}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
        _step_error
    {% else %}
        M118 No skipped steps detected.
    {% endif %}

[gcode_macro MAX_ACCEL_TEST]
# Tests maximum acceleration on X or Y axis
# Parameters:
# - MIN_ACCEL: Starting acceleration (default: 100)
# - MAX_ACCEL: Maximum acceleration (default: 1000)
# - ACCEL_INCREMENT: Step size (default: 100)
# - AXIS: Test axis X or Y (default: X)
# - SPEED: Test speed (default: max_velocity)
# - REPEAT: Movements per accel step (default: 50)
# - MIN_DISTANCE: Minimum movement distance in mm (default: 50)

gcode:
    {% set cfg = printer.configfile.settings %}
    {% set structure = printer["gcode_macro _USER_VARIABLES"].structure|lower %}
    {% set min_accel = params.MIN_ACCEL|default(100)|int %}
    {% set max_accel = params.MAX_ACCEL|default(1000)|int %}
    {% set accel_step = params.ACCEL_INCREMENT|default(100)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set velocity = params.SPEED|default(cfg.printer.max_velocity)|float %}
    {% set repeat = params.REPEAT|default(50)|int %}
    {% set min_distance = params.MIN_DISTANCE|default(50)|float %}

    {% if min_accel > max_accel %}
        {action_raise_error("MIN_ACCEL must be <= MAX_ACCEL")} 
    {% endif %}
   
    # Calculate axis boundaries
    {% set stepper = "stepper_" + axis|lower %}
    {% set axis_min = cfg[stepper].position_min|float %}
    {% set axis_max = cfg[stepper].position_max|float %}
    {% set margin = [20, 0.1 * (axis_max - axis_min)]|min %}
    {% set axis_min = axis_min + margin %}
    {% set axis_max = axis_max - margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    # Validate distance requirements
    {% set required_distance = (velocity ** 2) / min_accel %}
    {% if required_distance > axis_range %}
        {action_raise_error("Not enough axis distance! Increase MIN_ACCEL or decrease SPEED.")}
    {% endif %}

    {% set feedrate = velocity * 60 %}

    # Home and prepare
    {% if "xyz" not in printer.toolhead.homed_axes %}
        M118 Homing all axes...
        G28
    {% else %}
        M118 Z already homed, skipping full home
    {% endif %}
    {% if structure == "cartesian" %}
        M118 Homing {axis} axis (Cartesian mode)
        G28 {axis}  # Only home tested axis for cartesian
    {% else %}
        M118 Homing X Y axes (CoreXY mode)
        G28 X Y  # Home both for corexy (coupled axes)
    {% endif %}
    _store_mcu_position
    
    # Set limits before first movement
    SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={min_accel}
    
    M118 ===== MAX_ACCEL_TEST START =====
    M118 Axis: {axis} | Speed: {velocity} mm/s | Range: {min_accel}-{max_accel} mm/s²
    M118 Steps: {accel_step} mm/s² | Repeats: {repeat} | Min distance: {min_distance} mm
    M118 Test area: {axis_min|round(1)} to {axis_max|round(1)} mm (Range: {axis_range|round(1)} mm)
    M118 ================================
    
    {% if axis == "X" %}
        G1 X{axis_mid} Z20 F{feedrate}
    {% else %}
        G1 Y{axis_mid} Z20 F{feedrate}
    {% endif %}

    # Test loop
    {% for accel in range(min_accel, max_accel + 1, accel_step) %}
        SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} 
        {% set progress = ((accel - min_accel) / (max_accel - min_accel) * 100)|round(0) %}
        M118 [{progress|int}%] Testing {velocity} mm/s @ {accel} mm/s²
        
        {% for i in range(repeat) %}
            {% set cruise_distance = (velocity ** 2) / accel %}
            {% set max_distance = [4 * cruise_distance, axis_range]|min %}
            {% set movement_distance = [min_distance, max_distance]|max %}
            {% set movement_distance = (range((cruise_distance * 100)|int, (movement_distance * 100)|int)|random) / 100 %}

            G1 {axis}{axis_mid - movement_distance / 2} F{feedrate}
            G1 {axis}{axis_mid + movement_distance / 2}
            G1 {axis}{axis_mid}
        {% endfor %}

        {% if structure == "cartesian" %}
            G28 {axis}  # Only home tested axis for cartesian
        {% else %}
            G28 X Y  # Home both for corexy
        {% endif %}
        _compare_mcu_position
        {% if axis == "X" %}
            G1 X{axis_mid} F{feedrate}
        {% else %}
            G1 Y{axis_mid} F{feedrate}
        {% endif %}
    {% endfor %}
    
    M118 ===== MAX_ACCEL_TEST COMPLETE =====
    M118 Tested: {min_accel}-{max_accel} mm/s² in {accel_step} mm/s² steps
    M118 No skipped steps detected - all tests passed!
    M118 ====================================
        
    SET_VELOCITY_LIMIT VELOCITY={cfg.printer.max_velocity} ACCEL={cfg.printer.max_accel}

[gcode_macro MAX_SCV_TEST]
# Tests square corner velocity (SCV) with various corner patterns
# Parameters:
# - MIN_SCV: Starting SCV (default: 1)
# - MAX_SCV: Maximum SCV (default: 20)
# - SCV_INCREMENT: Step size (default: 1)
# - SPEED: Test speed (default: 100)
# - ACCEL: Acceleration (default: 3000)
# - CORNER_SIZE: Size of test pattern in mm (default: 50)
# - REPEAT: Pattern repetitions per SCV step (default: 3)

gcode:
    {% set cfg = printer.configfile.settings %}
    {% set structure = printer["gcode_macro _USER_VARIABLES"].structure|lower %}
    {% set min_scv = params.MIN_SCV|default(1)|float %}
    {% set max_scv = params.MAX_SCV|default(20)|float %}
    {% set scv_step = params.SCV_INCREMENT|default(1)|float %}
    {% set speed = params.SPEED|default(100)|float %}
    {% set accel = params.ACCEL|default(3000)|int %}
    {% set corner_size = params.CORNER_SIZE|default(50)|float %}
    {% set repeat = params.REPEAT|default(3)|int %}

    {% if min_scv > max_scv %}
        {action_raise_error("MIN_SCV must be <= MAX_SCV")} 
    {% endif %}

    # Calculate center position
    {% set x_min = cfg.stepper_x.position_min|float %}
    {% set x_max = cfg.stepper_x.position_max|float %}
    {% set y_min = cfg.stepper_y.position_min|float %}
    {% set y_max = cfg.stepper_y.position_max|float %}
    {% set x_center = (x_min + x_max) / 2 %}
    {% set y_center = (y_min + y_max) / 2 %}
    
    # Pattern boundaries
    {% set half_size = corner_size / 2 %}
    {% set x_left = x_center - half_size %}
    {% set x_right = x_center + half_size %}
    {% set y_front = y_center - half_size %}
    {% set y_back = y_center + half_size %}
    {% set feedrate = speed * 60 %}

    # Home and prepare
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G28 X Y
    _store_mcu_position
    
    SAVE_GCODE_STATE NAME=SCV_TEST
    
    M118 SCV_TEST: Testing {min_scv} to {max_scv} @ {speed} mm/s, {accel} mm/s²
    
    # Set velocity limits (will update SCV in loop)
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} SQUARE_CORNER_VELOCITY={min_scv}
    G1 X{x_center} Y{y_center} Z20 F{feedrate}

    # Test loop
    {% set scv_value = min_scv %}
    {% for step in range(((max_scv - min_scv) / scv_step + 1)|int) %}
        {% set scv_value = min_scv + step * scv_step %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} SQUARE_CORNER_VELOCITY={scv_value}
        M118 Testing SCV: {scv_value} mm/s
        
        {% for i in range(repeat) %}
            # 90-degree corners - Square pattern
            G1 X{x_left} Y{y_front} F{feedrate}
            G1 X{x_left} Y{y_back} F{feedrate}
            G1 X{x_right} Y{y_back} F{feedrate}
            G1 X{x_right} Y{y_front} F{feedrate}
            G1 X{x_left} Y{y_front} F{feedrate}
            
            # 90-degree corners - Figure-8 pattern
            G1 X{x_center} Y{y_center} F{feedrate}
            G1 X{x_left} Y{y_back} F{feedrate}
            G1 X{x_center} Y{y_center} F{feedrate}
            G1 X{x_right} Y{y_back} F{feedrate}
            G1 X{x_center} Y{y_center} F{feedrate}
            G1 X{x_right} Y{y_front} F{feedrate}
            G1 X{x_center} Y{y_center} F{feedrate}
            G1 X{x_left} Y{y_front} F{feedrate}
            G1 X{x_center} Y{y_center} F{feedrate}
            
            # Zigzag pattern for rapid direction changes
            G1 X{x_left} Y{y_front} F{feedrate}
            G1 X{x_right} Y{y_back} F{feedrate}
            G1 X{x_left} Y{y_back} F{feedrate}
            G1 X{x_right} Y{y_front} F{feedrate}
        {% endfor %}

        # Return to center and verify
        G1 X{x_center} Y{y_center} F{feedrate}
        G28 X Y
        _compare_mcu_position
        G1 X{x_center} Y{y_center} F{feedrate}
    {% endfor %}
    
    RESTORE_GCODE_STATE NAME=SCV_TEST
    SET_VELOCITY_LIMIT VELOCITY={cfg.printer.max_velocity} ACCEL={cfg.printer.max_accel} SQUARE_CORNER_VELOCITY={cfg.printer.square_corner_velocity}

[gcode_macro MAX_VELOCITY_TEST]
# Tests maximum velocity on X or Y axis
# Parameters:
# - MIN_VELOCITY: Starting velocity (default: 10)
# - MAX_VELOCITY: Maximum velocity (default: 300)
# - VELOCITY_INCREMENT: Step size (default: 10)
# - AXIS: Test axis X or Y (default: X)
# - ACCEL: Acceleration (default: max_accel)
# - DISTANCE: "full" or "short" (default: full)
# - REPEAT: Movements per velocity step (default: 5 for full, 50 for short)

gcode:
    {% set cfg = printer.configfile.settings %}
    {% set structure = printer["gcode_macro _USER_VARIABLES"].structure|lower %}
    {% set min_vel = params.MIN_VELOCITY|default(10)|int %}
    {% set max_vel = params.MAX_VELOCITY|default(300)|int %}
    {% set vel_step = params.VELOCITY_INCREMENT|default(10)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set accel = params.ACCEL|default(cfg.printer.max_accel)|float %}
    {% set distance = params.DISTANCE|default("full")|lower %}
    {% set repeat = params.REPEAT|default(50 if distance == "short" else 5)|int %}

    {% if min_vel > max_vel %}
        {action_raise_error("MIN_VELOCITY must be <= MAX_VELOCITY")} 
    {% elif distance not in ["full", "short"] %}
        {action_raise_error("DISTANCE must be 'full' or 'short'")} 
    {% endif %}

    # Calculate axis boundaries
    {% set stepper = "stepper_" + axis|lower %}
    {% set axis_min = cfg[stepper].position_min|float %}
    {% set axis_max = cfg[stepper].position_max|float %}
    {% set margin = [20, 0.1 * (axis_max - axis_min)]|min %}
    {% set axis_min = axis_min + margin %}
    {% set axis_max = axis_max - margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (max_vel ** 2) / accel > axis_range %}
        {action_raise_error("Not enough axis distance! Increase ACCEL or decrease MAX_VELOCITY.")}
    {% endif %}

    # Home and prepare
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if structure == "cartesian" %}
        G28 {axis}  # Only home tested axis for cartesian
    {% else %}
        G28 X Y  # Home both for corexy
    {% endif %}
    _store_mcu_position
    
    # Set limits before first movement
    SET_VELOCITY_LIMIT VELOCITY={min_vel} ACCEL={accel}
    
    {% if axis == "X" %}
        G1 X{axis_mid} Z20
    {% else %}
        G1 Y{axis_mid} Z20
    {% endif %}
    
    # Test loop
    {% for velocity in range(min_vel, max_vel + 1, vel_step) %}
        {% set feedrate = velocity * 60 %}
        SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel}
        M118 Testing: {velocity} mm/s @ {accel} mm/s²
        
        {% for i in range(repeat) %}
            {% if distance == "full" %}
                {% set move_dist = axis_range %}
            {% else %}
                {% set min_dist = (velocity ** 2) / accel %}
                {% set max_dist = [4 * min_dist, axis_range]|min %}
                {% set move_dist = (range((min_dist * 100)|int, (max_dist * 100)|int)|random) / 100 %}
            {% endif %}

            G1 {axis}{axis_mid - move_dist / 2} F{feedrate}
            G1 {axis}{axis_mid + move_dist / 2}
            G1 {axis}{axis_mid}
        {% endfor %}
        
        {% if structure == "cartesian" %}
            G28 {axis}  # Only home tested axis for cartesian
        {% else %}
            G28 X Y  # Home both for corexy
        {% endif %}
        _compare_mcu_position
        {% if axis == "X" %}
            G1 X{axis_mid} F{feedrate}
        {% else %}
            G1 Y{axis_mid} F{feedrate}
        {% endif %}
    {% endfor %}

    SET_VELOCITY_LIMIT VELOCITY={cfg.printer.max_velocity} ACCEL={cfg.printer.max_accel}
    
[gcode_macro BENCHMARK]
# Benchmark test with repeatable random pattern
# Parameters:
# - SPEED: Test speed (default: max_velocity)
# - ITERATIONS: Number of test cycles (default: 1)
# - ACCEL: Acceleration (default: max_accel)
# - BOUND: Border margin (default: 40)
# - SMALLPATTERNSIZE: Small pattern box size (default: 20)
# - SCV: Square corner velocity (default: printer setting)
# - ZPOS: Z test height (default: 20)
# - CRUISE_RATIO: Minimum cruise ratio (default: 0.0, optional)
# - SEED: Random seed for reproducible patterns (default: 12345)

gcode:
    {% set cfg = printer.configfile.settings %}
    {% set speed = params.SPEED|default(cfg.printer.max_velocity)|int %}
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set accel = params.ACCEL|default(cfg.printer.max_accel)|int %}
    {% set bound = params.BOUND|default(40)|int %}
    {% set small_size = params.SMALLPATTERNSIZE|default(20)|int %}
    {% set scv = params.SCV|default(cfg.printer.square_corner_velocity)|int %}
    {% set zpos = params.ZPOS|default(20)|int %}
    {% set seed = params.SEED|default(12345)|int %}

    # Validate Z position
    {% set z_min = cfg.stepper_z.position_min|float %}
    {% set z_max = cfg.stepper_z.position_max|float %}
    {% if zpos < z_min or zpos > z_max %}
        {action_raise_error("ZPOS %d outside valid range (%d to %d)" % (zpos, z_min, z_max))}
    {% endif %}

    # Calculate boundaries
    {% set x_min = cfg.stepper_x.position_min|int + bound %}
    {% set x_max = cfg.stepper_x.position_max|int - bound %}
    {% set y_min = cfg.stepper_y.position_min|int + bound %}
    {% set y_max = cfg.stepper_y.position_max|int - bound %}
    {% set x_center = (x_min + x_max) / 2 %}
    {% set y_center = (y_min + y_max) / 2 %}
    {% set x_c_min = x_center - small_size / 2 %}
    {% set x_c_max = x_center + small_size / 2 %}
    {% set y_c_min = y_center - small_size / 2 %}
    {% set y_c_max = y_center + small_size / 2 %}
    {% set feedrate = speed * 60 %}

    SAVE_GCODE_STATE NAME=BENCHMARK
    
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G28 X Y
    _store_mcu_position
    
    
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} SQUARE_CORNER_VELOCITY={scv} 
    M118 BENCHMARK: {iterations} iterations @ {speed} mm/s, {accel} mm/s², seed {seed}
    
    G0 Y{y_min} Z{zpos} F{feedrate}

    # Use seed for reproducible random movements
    {% set _ = range(seed)|random %}

    {% for i in range(iterations) %}
        # Large pattern - diagonals
        G0 X{x_min} Y{y_min} F{feedrate}
        G0 X{x_max} Y{y_max} F{feedrate}
        G0 X{x_min} Y{y_min} F{feedrate}
        G0 X{x_max} Y{y_min} F{feedrate}
        G0 X{x_min} Y{y_max} F{feedrate}
        G0 X{x_max} Y{y_min} F{feedrate}
        
        # Large pattern - box
        G0 X{x_min} Y{y_min} F{feedrate}
        G0 X{x_min} Y{y_max} F{feedrate}
        G0 X{x_max} Y{y_max} F{feedrate}
        G0 X{x_max} Y{y_min} F{feedrate}
        
        # Small pattern - diagonals 
        G0 X{x_c_min} Y{y_c_min} F{feedrate}
        G0 X{x_c_max} Y{y_c_max} F{feedrate}
        G0 X{x_c_min} Y{y_c_min} F{feedrate}
        G0 X{x_c_max} Y{y_c_min} F{feedrate}
        G0 X{x_c_min} Y{y_c_max} F{feedrate}
        G0 X{x_c_max} Y{y_c_min} F{feedrate}
        
        # Small pattern - box
        G0 X{x_c_min} Y{y_c_min} F{feedrate}
        G0 X{x_c_min} Y{y_c_max} F{feedrate}
        G0 X{x_c_max} Y{y_c_max} F{feedrate}
        G0 X{x_c_max} Y{y_c_min} F{feedrate}

        # Small pattern - fill (using seed for random but reproducible positions)
        {% set r1 = (range(1000)|random) / 200 %}
        {% set r2 = (range(1000)|random) / 200 %}
        G0 X{x_c_min + r1} Y{y_c_min + r1} F{feedrate}
        G0 X{x_c_max - r1} Y{y_c_max - r1} F{feedrate}
        G0 X{x_c_min + r2} Y{y_c_min + r2} F{feedrate}
        G0 X{x_c_max - r2} Y{y_c_max - r2} F{feedrate}
    {% endfor %}

    G28 X Y
    _compare_mcu_position
    
    RESTORE_GCODE_STATE NAME=BENCHMARK
    SET_VELOCITY_LIMIT VELOCITY={cfg.printer.max_velocity} ACCEL={cfg.printer.max_accel}
