# tested with klipper version v0.11.0-225 and below

[gcode_macro _USER_VARIABLES]
# This macro allows you to set some user variables for your specific printer structure.
# Currently supported: "cartesian" and "corexy". 

################################################
###########  SET YOUR VARIABLE  ################
variable_structure: "cartesian"
#variable_structure: "corexy"
################################################
################################################

## Do not remove this line
gcode:


[gcode_macro _step_error]
# This macro triggers an error message when skipped steps are detected.
gcode:  
    {action_raise_error("SKIPPED STEPS DETECTED!")}


[gcode_macro _store_mcu_position]
# This macro stores the current position of a specified stepper motor in a variable named mcu_position. 
# This stored position can be accessed later for purposes such as comparing the current position 
# of the stepper motor to its position at a prior time.
variable_mcu_position_x: 0
variable_mcu_position_y: 0 
gcode:
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={printer.endstop_phase.last_home.stepper_x.mcu_position}
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={printer.endstop_phase.last_home.stepper_y.mcu_position}  


[gcode_macro _compare_mcu_position]
# This macro compares the previously stored position (saved in _store_mcu_position macro) of the specified stepper motor with its current position. 
# If the difference between the two positions exceeds the number of microsteps set in the printer 
# settings for that stepper, it outputs a warning message and resets the velocity limit to maximum values. 
# In addition, the _step_error macro is called.
# If no step differences are detected, a corresponding message is output.

gcode:
    {% set structure = params.STRUCTURE|default(printer["gcode_macro _USER_VARIABLES"].structure)|string|lower %}
    {% set config = printer.configfile.settings %}
    {% set old_position_x = printer["gcode_macro _store_mcu_position"].mcu_position_x|int %}
    {% set old_position_y = printer["gcode_macro _store_mcu_position"].mcu_position_y|int %}
    {% set new_position_x = printer.endstop_phase.last_home.stepper_x.mcu_position %}
    {% set new_position_y = printer.endstop_phase.last_home.stepper_y.mcu_position %}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={new_position_x}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={new_position_y}
    {% if (old_position_x - new_position_x)|abs > printer.configfile.settings["stepper_x"]["microsteps"] or (old_position_y - new_position_y)|abs > printer.configfile.settings["stepper_y"]["microsteps"] %} 
        {% if structure == "cartesian" %}
            M118 Step difference - X: {old_position_x - new_position_x}, Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - A: {old_position_x - new_position_x}, B: {old_position_y - new_position_y}
        {% endif %}
        SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
        _step_error
    {% else %}
        {% if structure == "cartesian" %}
            M118 Step difference - Stepper X: {old_position_x - new_position_x}, Stepper Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - Stepper A: {old_position_x - new_position_x}, Stepper B: {old_position_y - new_position_y}
        {% endif %}
        M118 No skipped steps detected.
    {% endif %}

[gcode_macro MAX_ACCEL_TEST]
# This macro performs a test to find the maximum acceleration of a 3D printer along the X and Y axes.
# Created by Fragmon [crydteam]
# Version 1.0

# Description: 
# MAX_ACCEL_TEST is a G-code macro designed to examine the maximum acceleration a 3D printer can achieve along the X and Y axes. 
# The macro executes a series of movements at various acceleration levels, providing insights into printer performance at these rates.
# It makes use of several parameters for test customization:
# - MIN_ACCEL: The initial acceleration for the test, defaults to 100 mm/s^2.
# - MAX_ACCEL: The maximum acceleration for the test, defaults to 1000 mm/s^2.
# - ACCEL_INCREMENT: The increment of acceleration for each test step, defaults to 100 mm/s^2.
# - AXIS: The axis along which the test should be performed, defaults to "X".
# - SPEED: The speed to be used during the test, defaults to the printer's max velocity setting.
# - REPEAT: The number of round trip movements to be performed at each velocity step, defaults to 50.
# Throughout the test, the macro will go through the specified acceleration range, perform the test movements, and display the current speed and acceleration values.
# Upon completion, it will restore the printer's initial acceleration settings and home all axes.

gcode:
    # Set default values for the parameters
    {% set config = printer.configfile.settings %}
    {% set min_accel = params.MIN_ACCEL|default(10)|int %}
    {% set max_accel = params.MAX_ACCEL|default(300)|int %}
    {% set limit_accel = 75000 %}
    {% set accel_increment = params.ACCEL_INCREMENT|default(100)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set velocity = params.SPEED|default(config.printer["max_velocity"])|float %}
    {% set repeat = params.REPEAT|default(50)|int %}

    # Check if the min_accel and max_accel values are within the allowed limit
    {% if min_accel > max_accel %}
        { action_raise_error("Minimum acceleration is greater than maximum acceleration.") } 
    {% elif max_accel > limit_accel %}
        { action_raise_error("Maximum acceleration is greater than limit.") } 
    {% endif %}
   
    # Calculate the max, min and midpoint of the X and Y axes
    {% set stepper = "stepper_" + axis|lower %}
    {% set stepper_config = config[stepper] %}
    {% set axis_min = stepper_config["position_min"]|float %}
    {% set axis_max = stepper_config["position_max"]|float %}
    {% set max_axis_margin = 0.1 * (axis_max - axis_min) %}
    {% set axis_margin = 20 if 20 < max_axis_margin else max_axis_margin %}

    {% set axis_min = axis_min + axis_margin %}
    {% set axis_max = axis_max - axis_margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (velocity ** 2) / min_accel > axis_range %}
        { action_raise_error("Not enough distance on the axis for cruising. Either increase MIN_ACCEL or decrease VELOCITY.") }
    {% endif %}

    # Home the axis, store the step position, and set the limits for the test
    G28                                                                             
    G28 X Y                                                                          
    _store_mcu_position                                                              
    G1 X{axis_mid} Y{axis_mid} Z20

    # Loop through the specified range of accelerations
    {% for accel in range(min_accel, max_accel + 1, accel_increment) %}
        # Set the acceleration
        SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} ACCEL_TO_DECEL={accel}

        # Display the current speed and acceleration values
        M118 Velocity / Acceleration: {velocity} mm/s / {accel} mm/s2
        
        # Perform i test movements for the specified axis
        {% for i in range(repeat) %}
            # Calculate a random distance for the test movement
            {% set min_distance = (velocity ** 2) / accel %}
            {% set max_distance = 4 * min_distance %}
            {% set max_distance = max_distance if max_distance < axis_range else axis_range %}
            {% set movement_distance = (range(min_distance|int * 100, max_distance|int * 100)|random) / 100 %}

            # Execute test movements
            G1 {axis}{ axis_mid - movement_distance / 2 } F{ velocity * 60 }
            G1 {axis}{ axis_mid + movement_distance / 2 }
            G1 {axis}{ axis_mid }
        {% endfor %}

        # Home the axis, verify the step position
        G28 X Y
        _compare_mcu_position STEPPER={stepper}
        G1 X{axis_mid} Y{axis_mid}
    {% endfor %}
        
    # Reset the initial limits
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}       

[gcode_macro MAX_VELOCITY_TEST]
# This macro performs a test to find the maximum velocity of a 3D printer along the X and Y axes.
# Created by Fragmon [crydteam] 
# Version 1.0

# Description: 
# MAX_VELOCITY_TEST is a G-code macro designed to examine the maximum velocity a 3D printer can achieve along the X and Y axes. 
# The macro executes a series of movements at various velocity levels, providing insights into printer performance at these rates.
# It makes use of several parameters for test customization:
# - MIN_VELOCITY: The minimum velocity for the test, defaults to 10 mm/s.
# - MAX_VELOCITY: The maximum velocity for the test, defaults to 300 mm/s.
# - VELOCITY_INCREMENT: The increment of velocity for each test step, defaults to 10 mm/s.
# - AXIS: The axis along which the test should be performed, defaults to "X".
# - ACCEL: The acceleration to be used during the test, defaults to the printer's max acceleration setting.
# - DISTANCE: Specifies the distance for the test movements, either "full" (default) or "short". If set to "full", the macro will use the maximum available distance on the axis; if set to "short", it will use a random distance for each test movement that ensures the specified velocity is reached.
# - REPEAT: The number of round trip movements to be performed at each velocity step, defaults to 5 for "DISTANCE=full", 50 for "short".
# Throughout the test, the macro will go through the specified velocity range, perform the test movements, and display the current speed and acceleration values.
# Upon completion, it will restore the printer's initial velocity settings and home all axes.

gcode:
    # Set default values for the parameters
    {% set config = printer.configfile.settings %}
    {% set min_velocity = params.MIN_VELOCITY|default(10)|int %}
    {% set max_velocity = params.MAX_VELOCITY|default(300)|int %}
    {% set limit_velocity = 1000 %}
    {% set velocity_increment = params.VELOCITY_INCREMENT|default(10)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set accel = params.ACCEL|default(config.printer["max_accel"])|float %}
    {% set distance = params.DISTANCE|default("full")|lower %}
    {% set repeat = params.REPEAT|default(50 if distance == "short" else 5)|int %}

    # Check if the min_velocity and max_velocity values are within the allowed limit
    {% if min_velocity > max_velocity %}
        { action_raise_error("Minimum velocity is greater than maximum velocity.") } 
    {% elif max_velocity > limit_velocity %}
        { action_raise_error("Maximum velocity is greater than limit.") } 
    {% elif distance not in ["full", "short"] %}
        { action_raise_error("Set the distance to full or short") } 
    {% endif %}

    # Calculate the max, min and midpoint of the X and Y axes
    {% set stepper = "stepper_" + axis|lower %}
    {% set stepper_config = config[stepper] %}
    {% set axis_min = stepper_config["position_min"]|float %}
    {% set axis_max = stepper_config["position_max"]|float %}
    {% set max_axis_margin = 0.1 * (axis_max - axis_min) %}
    {% set axis_margin = 20 if 20 < max_axis_margin else max_axis_margin %}

    {% set axis_min = axis_min + axis_margin %}
    {% set axis_max = axis_max - axis_margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (max_velocity ** 2) / accel > axis_range %}
        { action_raise_error("Not enough distance on the axis for cruising. Either increase ACCEL or decrease MAX_VELOCITY.") }
    {% endif %}

    # Home the axis, store the step position, and set the limits for the test
    G28                                                                              
    G28 X Y                                                                          
    _store_mcu_position                                                              
    G1 X{axis_mid} Y{axis_mid} Z20                                                   
    
    # Loop through the specified range of velocities
    {% for velocity in range(min_velocity, max_velocity + 1, velocity_increment) %}
        SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} ACCEL_TO_DECEL={accel}
        # Display the current speed and acceleration values
        M118 Velocity / Acceleration: {velocity} mm/s / {accel} mm/s2                
        # Perform test movements for the specified axis and distance
        {% for i in range(repeat) %}
            # Calculate a distance for the test movement
            {% if distance == "full" %}
                {% set movement_distance = axis_range %}
            {% else %}
                {% set min_distance = (velocity ** 2) / accel %}
                {% set max_distance = 4 * min_distance %}
                {% set max_distance = max_distance if max_distance < axis_range else axis_range %}
                {% set movement_distance = (range(min_distance|int * 100, max_distance|int * 100)|random) / 100 %}
            {% endif %}

            # Execute test movements
            G1 {axis}{ axis_mid - movement_distance / 2 } F{ velocity * 60 }          
            G1 {axis}{ axis_mid + movement_distance / 2 }                             
            G1 {axis}{ axis_mid }                                                     
        {% endfor %}
        # Home the axis, verify the step position
        G28 X Y                                                                      
        _compare_mcu_position   
        G1 X{axis_mid} Y{axis_mid}
    {% endfor %}    

    # Reset the initial limits
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel} 

[gcode_macro BENCHMARK]
# This macro executes a benchmark test of a 3D printer's performance along the X and Y axes.
# Created by Fragmon [crydteam] 
# Version 1.0

# Description: 
# BENCHMARK is a G-code macro designed to test the 3D printer's performance under various conditions. 
# The macro performs a series of random movements along the X and Y axes, providing insights into the printer's responsiveness and precision.
# It makes use of several parameters for test customization:
# - MAX_ACCEL: The maximum acceleration for the test, defaults to the printer's max acceleration setting.
# - MAX_VELOCITY: The maximum velocity for the test, defaults to the printer's max velocity setting.
# - MOVEMENTS_SHORT: The number of short movements to be performed, defaults to 200.
# - MOVEMENTS_LONG: The number of long movements to be performed, defaults to 200.
# - RANDOM_SEED: The seed value for generating random distances, defaults to 42.
# Throughout the test, the macro will perform the specified number of short and long movements at the given velocity and acceleration, providing insights into how well the printer operates under these conditions.
# Upon completion, it will restore the printer's initial velocity settings and home all axes.

gcode:
    # Set default values for the parameters
    {% set config = printer.configfile.settings %}
    {% set accel = params.MAX_ACCEL|default(config.printer["max_accel"])|int %}
    {% set velocity = params.MAX_VELOCITY|default(config.printer["max_velocity"])|int %}
    {% set movements_short = params.MOVEMENTS_SHORT|default(200)|int %}
    {% set movements_long = params.MOVEMENTS_LONG|default(200)|int %}
    {% set seed = params.RANDOM_SEED|default(42)|int %}

    # Get the stepper settings and calculate the midpoints of the X and Y axes
    {% set stepper_x = config["stepper_x"] %}
    {% set stepper_y = config["stepper_y"] %}
    {% set x_min = stepper_x["position_min"] %}
    {% set x_max = stepper_x["position_max"] %}
    {% set y_min = stepper_y["position_min"] %}
    {% set y_max = stepper_y["position_max"] %}
    {% set axis_range_x = x_max - x_min %}
    {% set axis_range_y = y_max - y_min %}
    {% set axis_mid_x = (axis_range_x) / 2.0 %}
    {% set axis_mid_y = (axis_range_y) / 2.0 %}

    # Home the axes, store the step position, and set the Z-axis to 20
    G28                                                                             
    G28 X Y                                                                          
    _store_mcu_position
    G1 Y{axis_mid_y} X{axis_mid_x} Z20

    # Set the fixed acceleration and velocity values
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel} VELOCITY={velocity}

    # Perform the specified number of short movements
    {% for i in range(movements_short) %}
        {% set a = 1103515245 %}
        {% set c = 12345 %}
        {% set m = 2 ** 31 %}
        {% set seed_x = ((seed + i * 2) * a + c) % m %}
        {% set seed_y = ((seed + i * 2 + 1) * a + c) % m %}

        {% set min_distance = (velocity ** 2) / accel %}
        {% set max_distance = 3 * min_distance %}
        {% set max_distance_x = max_distance if max_distance < axis_range_x else axis_range_x %}
        {% set max_distance_y = max_distance if max_distance < axis_range_y else axis_range_y %}

        {% set movement_distance_x = (((seed_x % (max_distance_x * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}
        {% set movement_distance_y = (((seed_y % (max_distance_y * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}

        # Execute movements to the random X and Y positions
        G1 X{axis_mid_x - movement_distance_x / 2} Y{axis_mid_y - movement_distance_y / 2} F{ velocity * 60 }
    {% endfor %}

  # Perform the specified number of long movements
    {% for i in range(movements_long) %}
        {% set a = 1103515245 %}
        {% set c = 12345 %}
        {% set m = 2 ** 31 %}
        {% set seed_x = ((seed + i * 2 + movements_short * 2) * a + c) % m %}
        {% set seed_y = ((seed + i * 2 + 1 + movements_short * 2) * a + c) % m %}

        {% set min_distance = (velocity ** 2) / accel %}
        {% set max_distance_x_long = axis_range_x %}
        {% set max_distance_y_long = axis_range_y %}
        {% set movement_distance_x_long = (((seed_x % (max_distance_x_long * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}
        {% set movement_distance_y_long = (((seed_y % (max_distance_y_long * 100 - min_distance * 100 + 1)) + min_distance * 100) / 100) %}

        # Execute movements to the random X and Y positions
        G1 X{movement_distance_x_long / 2} Y{movement_distance_y_long / 2} F{ velocity * 60 }
    {% endfor %}

    # Home the axes, verify the step position and reset to initial limits
    G28 X Y                                                                        
    _compare_mcu_position      
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
